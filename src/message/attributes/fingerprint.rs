use super::*;

/// The FINGERPRINT attribute.
///
/// Used for distinguishing STUN messages from packets of other protocols when
/// they are multiplexed on the same transport address.
///
/// Contains a CRC-32 of the STUN message XOR'ed with 0x5354554E.
/// (The XOR operation ensures that the FINGERPRINT test
/// will not report a false positive on a packet containing
/// a CRC-32 generated by an application protocol.)
///
/// See [RFC8489 Section 14.7](https://datatracker.ietf.org/doc/html/rfc8489#section-14.7) for more details.
#[derive(Debug, PartialEq)]
pub enum Fingerprint {
    Incoming { fingerprint: u32 },
    Outgoing,
}

impl Attribute for Fingerprint {
    const TY: u16 = 0x8028;
    const SIZE: usize = 4;

    fn encode(&self, buf: &mut [u8], offset: usize) {
        if *self != Self::Outgoing {
            panic!("Needs to be outgoing");
        }

        let hash = crc32fast::hash(&buf[0..offset - 4]) ^ 0x5354554E;

        buf[offset..(offset + Self::SIZE)].copy_from_slice(&hash.to_be_bytes());
    }

    fn decode(buf: &[u8], meta: &AttributeMeta) -> Self {
        let fingerprint = u32::from_be_bytes(
            buf[meta.offset..(meta.offset + Self::SIZE)]
                .try_into()
                .unwrap(),
        );

        Self::Incoming { fingerprint }
    }
}
